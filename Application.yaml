---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  A template to spin up an EC2 instance ready for an Erlang/Elixir application.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - VPC
      - AvailabilityZone
      - SubnetId

    - Label:
        default: Amazon EC2 Instance Configuration
      Parameters:
      - InstanceType
      - InstanceKey
      - InstanceSubnet
      - PrimarySecurityGroup
      - SecondarySecurityGroup
      - AssignPublicIP
      - Sudo

    - Label:
        default: SNS EMail
      Parameters:
      - SNSEmail

    - Label:
        default: FT Required Tags
      Parameters:
      - TagEnvironment
      - TagTeamDL
      - TagSystemCode
      - TagIpCode
      - TagDescription
      - TagName
      - TagStopSchedule

    - Label:
        default: Application Configuration
      Parameters:
      - AppName

    ParameterLabels:
      InstanceType:
        default: Instance Type
      InstanceKey:
        default: Instance EC2 User Key
      InstanceSubnet:
        default: Subnet instance is in
      PrimarySecurityGroup:
        default: Primary Security Group
      SecondarySecurityGroup:
        default: Secondary Security Group
      AssignPublicIP:
        default: Require Public IP?
      Sudo:
        Default: The Sudo group to be added
      AppName:
        Default: The Erlang/Elixir application name as given in mix.exs, e.g. "graphql"

Parameters:
  VPC:
    Description: This is the VPC the stack will be deployed inside.
    Type: AWS::EC2::VPC::Id
    Default: vpc-c9dfd5ab
    # AllowedValues:
    # - vpc-c9dfd5ab
    # - vpc-af0215cd
    # - vpc-f3534591
    # - vpc-6cbedf09

  PrimarySecurityGroup:
    Description: The primary security group used by ELB, database and instance.
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-4b1f7f2e
    # AllowedValues:
    # - sg-4b1f7f2e
    # - sg-a5fd99c0
    # - sg-9591fbf0
    # - sg-4d20e329

  SecondarySecurityGroup:
    Description: The secondary security group used by ELB, database and instance.
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-7cfe9a19
    # AllowedValues:
    # - sg-54c0a631
    # - sg-7cfe9a19
    # - sg-1beb8b7e
    # - sg-f81bd89c

  AvailabilityZone:
    Description: Availability zone install the resources into.
    Type: AWS::EC2::AvailabilityZone::Name
    Default: eu-west-1b
    # AllowedValues:
    # - eu-west-1a
    # - eu-west-1b
    # - eu-west-1c
    # - us-east-1a
    # - us-east-1b
    # - us-east-1c

  InstanceSubnet:
    Description: The subnets to assign to the Instance; must match the AZ
    Type: AWS::EC2::Subnet::Id
    Default: subnet-ca6f3b8c
    # AllowedValues:
    # - subnet-33102047
    # - subnet-73ecbc35
    # - subnet-63690406
    # - subnet-bc5d68c8
    # - subnet-ca6f3b8c
    # - subnet-801e7de5
    # - subnet-c96755bd
    # - subnet-1eb0e258
    # - subnet-8c6805e9

  InstanceType:
    Description: The type and size of the instance. Check documentation for recommended types.
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - g2.2xlarge
    - g2.8xlarge
    - x1.32xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    Default: t2.small

  InstanceKey:
    Description: EC2User Key
#    Type: AWS::EC2::KeyPair::KeyName
    Type: String

  SNSEmail:
    Description: SNS Email Subscription to send alerts to.
    Type: String
    ConstraintDescription: There must be a valid email address for the SNS Topic
    AllowedPattern: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
    Default: membership.engineering@ft.com

  Sudo:
    Description: Sudo Group to be applied by default
    Type: String
    Default: sudomemb

  AssignPublicIP:
    Description: Whether you need a public IP. This must be true for public subnets and false for private subnets
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  IamInstanceProfile:
    Description: What IAM profile to give to this instance - for future use. Currently has to be FT-Linux-Role
    Type: String
    Default: FT-Linux-Role
    AllowedValues:
      - FT-Linux-Role

  ImageId:
    Description: The AMI to be used, this MUST be an Amazon Linux image for the userdata to build correctly. A default is given.
    Type: String
    Default: ami-d41d58a7

  TagEnvironment:
    Description: Tag detail for the Environment
    Type: String
    Default: int
    AllowedValues:
      - 'd'
      - 't'
      - 'p'
      - 'int'

  TagTeamDL:
    Description: Tag detail for the TeamDL
    ConstraintDescription: There must be a valid email address for the TeamDL Topic
    Type: String
    AllowedPattern: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
    Default: membership.engineering@ft.com

  TagSystemCode:
    Description: Tag detail for the SystemCode
    Type: String
    Default: memb-graphql-api

  TagIpCode:
    Description: Tag detail for the ipCode
    Type: String
    Default: P142

  TagDescription:
    Description: Tag detail for the describing the instance.
    Type: String
    Default: Erlang/Elixir Execution Node
    AllowedPattern : ([a-zA-Z0-9].*)

  TagName:
    Description: Tag detail for the Name used in the console of the instance. NOT THE HOSTNAME OF THE INSTANCE.
    Type: String
    Default: memb-grapql-1-eu-p

  TagStopSchedule:
    Description: Tag detail for the when the instance is to be powered off.
    Type: String
    Default: everyday

  AppName:
    Description: Elixir/Erlang application name as given in mix.exs (without atom prefix :)
    Type: String
    Default: graphql

Conditions:
  HasKeyName:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: InstanceKey

Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      SecurityGroupIds:
      - Ref: PrimarySecurityGroup
      - Ref: SecondarySecurityGroup
      SubnetId:
        Ref: InstanceSubnet
      InstanceType:
        Ref: InstanceType
      AvailabilityZone:
        Ref: AvailabilityZone
      ImageId:
        Ref: ImageId
      KeyName:
        Fn::If:
        - HasKeyName
        - Ref: InstanceKey
        - Ref: AWS::NoValue
      IamInstanceProfile:
        Ref: IamInstanceProfile
      Tags:
      - Key: environment
        Value:
          Ref: TagEnvironment
      - Key: teamDL
        Value:
          Ref: TagTeamDL
      - Key: systemCode
        Value:
          Ref: TagSystemCode
      - Key: ipCode
        Value:
          Ref: TagIpCode
      - Key: description
        Value:
          Ref: TagDescription
      - Key: Name
        Value:
          Ref: TagName
      - Key: stopSchedule
        Value:
          Ref: TagStopSchedule
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          /usr/bin/aws s3 cp s3://ft-ce-repository/amazon-ftbase/releases/bootstrap.sh .
          bash ./bootstrap.sh -s ${Sudo} -e ${TagEnvironment}
          # Dev tools
          sudo yum -y install git

          # Create user, and install tools locally under that user:
          sudo adduser ${TagSystemCode}
          sudo su - ${TagSystemCode}

          sudo mkdir -p /var/log/apps/${TagSystemCode}
          
          sudo chown ${TagSystemCode} /var/log/apps/${TagSystemCode}
          sudo chmod 770 /var/log/apps/${TagSystemCode}

          cat > /tmp/$$.logrotate <<__END__
          /var/log/apps/${TagSystemCode}/*.log {
              daily
              rotate 5
              maxsize 100M
              compress
              delaycompress
              missingok
              notifempty
          }
          __END__

          sudo cp /tmp/$$.logrotate /etc/logrotate.d/${TagSystemCode}.logrotate
          rm -f /tmp/$$.logrotate

          #Â where env vars for application will live
          sudo touch /etc/sysconfig/${AppName}

          # init script with low priority:
          echo -e "#!/bin/bash" > /tmp/$$.init
          echo -e "# chkconfig: 2345 10 90" > /tmp/$$.init
          echo -e "# description: Starts ${AppName} ${TagSystemCode}" >> /tmp/$$.init
          echo -e "SAVE=\$(set +o) && set -o allexport && . /etc/sysconfig/${AppName}; eval \"\$SAVE\"" >> /tmp/$$.init
          echo -e '\nexec /home/membership-graphql-api/deployments/${TagSystemCode}/bin/${AppName} $*' >> /tmp/$$.init
          
          sudo cp /tmp/$$.init  /etc/init.d/${AppName}

          sudo chkconfig --add ${AppName}


  InstanceCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU for instance.
      AlarmActions:
      - Ref: SNSTopic
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '90'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: MyInstance
        Value:
          Ref: MyInstance

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Ref: SNSEmail
        Protocol: email

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: MyInstance
  PrivateIP:
    Description: Private IP address of the newly created EC2 instance
    Value:
      !GetAtt MyInstance.PrivateIp
